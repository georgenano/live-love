package com.appspot.livelove.service;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slim3.datastore.Datastore;
import org.slim3.util.BeanUtil;

import com.appspot.livelove.meta.ArtistLiveMeta;
import com.appspot.livelove.meta.LiveMeta;
import com.appspot.livelove.meta.UserAccountLiveMeta;
import com.appspot.livelove.meta.UserAccountMeta;
import com.appspot.livelove.model.Artist;
import com.appspot.livelove.model.ArtistLive;
import com.appspot.livelove.model.Live;
import com.appspot.livelove.model.UserAccount;
import com.appspot.livelove.model.UserAccountLive;
import com.google.appengine.api.datastore.Key;

public class LiveService {

    private LiveMeta lm = new LiveMeta();
    private UserAccountMeta uam = new UserAccountMeta();
    private UserAccountLiveMeta ualm = new UserAccountLiveMeta();
    private ArtistLiveMeta alm = new ArtistLiveMeta();
    private ArtistService artistService = new ArtistService();

    public Live registLive(Map<String, Object> input, UserAccount ua) {
        Live live = new Live();
        BeanUtil.copy(input, live);

        // アーティストリストを設定
        String artistsStr = (String) input.get("artistList");
        String[] artists = artistsStr.split(",");
        for (String artistStr : artists) {
            Artist artist = artistService.getArtist(artistStr);
            if (artist == null) {
                artist = new Artist();
                artist.setName(artistStr);
                artist.setAutoGenerated(true);
            }

            ArtistLive al = new ArtistLive();
            al.getArtistRef().setModel(artist);
            al.getLiveRef().setModel(live);
            Datastore.put(artist, live, al);
        }

        // 開場、開演、終演時刻を設定
        String year = (String) input.get("start_year");
        String month = (String) input.get("start_month");
        String day = (String) input.get("start_day");
        String openHour = (String) input.get("open_hour");
        String openTime = (String) input.get("open_time");
        String startHour = (String) input.get("start_hour");
        String startTime = (String) input.get("start_time");
        String endHour = (String) input.get("end_hour");
        String endTime = (String) input.get("end_time");
        String openDate =
            year + "." + month + "." + day + " " + openHour + ":" + openTime;
        Date liveOpenDate = CommonUtilService.string2date(openDate);
        live.setLiveOpenDate(liveOpenDate);
        String startDate =
            year + "." + month + "." + day + " " + startHour + ":" + startTime;
        Date liveStartDate = CommonUtilService.string2date(startDate);
        live.setLiveStartDate(liveStartDate);
        String endDate =
            year + "." + month + "." + day + " " + endHour + ":" + endTime;
        Date liveEndDate = CommonUtilService.string2date(endDate);
        live.setLiveEndDate(liveEndDate);

        // 登録日、登録ユーザ、最終更新日、最終更新ユーザ、削除フラグを設定
        live.setRegistDate(new Date());
        live.getRegistUserAccountRef().setModel(ua);
        live.setLastUpdateDate(new Date());
        live.getLastUpdateUserAccountRef().setModel(ua);
        live.setDeleted(false);

        Datastore.put(ua, live);
        return live;
    }

    public Live updateLive(Key key, Map<String, Object> input, UserAccount ua) {
        // 更新後Live情報を編集
        Live live = Datastore.get(lm, key);
        BeanUtil.copy(input, live);

        // アーティストリストを設定
        List<ArtistLive> als = live.getArtistLiveListRef().getModelList();
        String artistsStr = (String) input.get("artistList");
        String[] artists = artistsStr.split(",");
        List<ArtistLive> inputList = new ArrayList<ArtistLive>();
        for (String artistStr : artists) {
            Artist artist = artistService.getArtist(artistStr);
            if (artist == null) {
                artist = new Artist();
                artist.setName(artistStr);
                artist.setAutoGenerated(true);
                Datastore.put(artist);
            }
            ArtistLive al = new ArtistLive();
            al.getArtistRef().setModel(artist);
            al.getLiveRef().setModel(live);
            inputList.add(al);
        }
        // アーティストライブ情報を削除
        List<ArtistLive> deleteTargets = substruct(als, inputList);
        List<Key> deleteKeys = new ArrayList<Key>();
        for (ArtistLive deleteTarget : deleteTargets) {
            deleteKeys.add(deleteTarget.getKey());
        }
        Datastore.delete(deleteKeys);
        // アーティストライブ情報を追加
        List<ArtistLive> addTargets = substruct(inputList, als);
        Datastore.put(addTargets);

        // 開場、開演、終演時刻を設定
        String year = (String) input.get("start_year");
        String month = (String) input.get("start_month");
        String day = (String) input.get("start_day");
        String openHour = (String) input.get("open_hour");
        String openTime = (String) input.get("open_time");
        String startHour = (String) input.get("start_hour");
        String startTime = (String) input.get("start_time");
        String endHour = (String) input.get("end_hour");
        String endTime = (String) input.get("end_time");
        String openDate =
            year + "." + month + "." + day + " " + openHour + ":" + openTime;
        Date liveOpenDate = CommonUtilService.string2date(openDate);
        live.setLiveOpenDate(liveOpenDate);
        String startDate =
            year + "." + month + "." + day + " " + startHour + ":" + startTime;
        Date liveStartDate = CommonUtilService.string2date(startDate);
        live.setLiveStartDate(liveStartDate);
        String endDate =
            year + "." + month + "." + day + " " + endHour + ":" + endTime;
        Date liveEndDate = CommonUtilService.string2date(endDate);
        live.setLiveEndDate(liveEndDate);

        // 最終更新日、最終更新ユーザ、削除フラグを設定
        live.setLastUpdateDate(new Date());
        live.getLastUpdateUserAccountRef().setModel(ua);
        live.setDeleted(false);

        Datastore.put(live);
        return live;
    }

    private static final List<ArtistLive> substruct(List<ArtistLive> aList,
            List<ArtistLive> bList) {
        List<ArtistLive> results = new ArrayList<ArtistLive>();
        results.addAll(aList);
        for (ArtistLive b : bList) {
            for (ArtistLive a : aList) {
                if (b
                    .getArtistRef()
                    .getModel()
                    .getName()
                    .equals(a.getArtistRef().getModel().getName())) {
                    results.remove(a);
                }
            }
        }
        return results;
    }

    public List<Live> getLiveList() {
        return Datastore.query(lm).sort(lm.lastUpdateDate.desc).asList();
    }

    public Map<String, List<Live>> getDailyLiveMap(int year, int month) {
        Map<String, List<Live>> dailyLiveMap =
            new HashMap<String, List<Live>>();
        Calendar cal = Calendar.getInstance();
        cal.set(year, month, 0, 0, 0, 0);
        for (int i = 0; i < cal.getActualMaximum(Calendar.DAY_OF_MONTH); i++) {
            Date startDate = cal.getTime();
            cal.add(Calendar.DATE, 1);
            Date endDate = cal.getTime();
            dailyLiveMap.put(
                Integer.toString(i),
                Datastore
                    .query(lm)
                    .filter(
                        lm.liveStartDate.greaterThanOrEqual(startDate),
                        lm.liveStartDate.lessThan(endDate),
                        lm.deleted.equal(false))
                    .asList());
        }
        return dailyLiveMap;
    }

    public Live getLiveDetail(Key key) {
        return Datastore.get(lm, key);
    }

    public boolean deleteLive(Key key, UserAccount ua) {
        if (isEditableUser(key, ua)) {
            Live target = Datastore.get(lm, key);
            target.setLastUpdateDate(new Date());
            target.getLastUpdateUserAccountRef().setModel(ua);
            target.setDeleted(true);
            Datastore.put(target);
            return true;
        } else {
            return false;
        }
    }

    public boolean isEditableUser(Key key, UserAccount ua) {
        Live target = Datastore.get(lm, key);
        if (target.getRegistUserAccountRef().getModel().equals(ua)) {
            return true;
        } else {
            return false;
        }
    }

    public boolean joinLive(Key liveKey, Key userAccountKey) {
        if (!joinedLive(liveKey, userAccountKey)) {
            Live live = Datastore.get(lm, liveKey);
            UserAccount userAccount = Datastore.get(uam, userAccountKey);
            UserAccountLive ual = new UserAccountLive();
            ual.getLiveRef().setModel(live);
            ual.getUserAccountRef().setModel(userAccount);
            ual.setRegistDate(new Date());
            ual.setDeleted(false);
            Datastore.put(live, userAccount, ual);
            return true;
        } else {
            return false;
        }
    }

    public boolean disJoinLive(Key liveKey, Key userAccountKey) {
        if (joinedLive(liveKey, userAccountKey)) {
            Live live = Datastore.get(lm, liveKey);
            UserAccount userAccount = Datastore.get(uam, userAccountKey);
            UserAccountLive ual =
                Datastore
                    .query(ualm)
                    .filter(
                        ualm.userAccountRef.equal(userAccountKey),
                        ualm.liveRef.equal(liveKey),
                        ualm.deleted.equal(false))
                    .asSingle();
            ual.setDeleted(true);
            Datastore.put(live, userAccount, ual);
            return true;
        } else {
            return false;
        }
    }

    public List<ArtistLive> getArtistListJoinedLive(Key key) {
        return Datastore
            .query(alm)
            .filter(alm.liveRef.equal(key), alm.deleted.equal(false))
            .asList();
    }

    public List<UserAccountLive> getUserListJoinedLive(Key key) {
        return Datastore
            .query(ualm)
            .filter(ualm.liveRef.equal(key), ualm.deleted.equal(false))
            .asList();
    }

    public boolean joinedLive(Key liveKey, Key userAccountKey) {
        UserAccountLive ual =
            Datastore
                .query(ualm)
                .filter(
                    ualm.userAccountRef.equal(userAccountKey),
                    ualm.liveRef.equal(liveKey),
                    ualm.deleted.equal(false))
                .asSingle();
        if (ual == null) {
            return false;
        } else {
            return true;
        }
    }

    public boolean inputCheck(Map<String, Object> input) {
        String liveName = (String) input.get("liveName");
        String artistList = (String) input.get("artistList");
        String pref = (String) input.get("pref");
        String year = (String) input.get("start_year");
        String month = (String) input.get("start_month");
        String day = (String) input.get("start_day");
        String startHour = (String) input.get("start_hour");
        String startTime = (String) input.get("start_time");
        if (liveName != ""
            && artistList != ""
            && pref != ""
            && year != ""
            && month != ""
            && day != ""
            && startHour != ""
            && startTime != "") {
            return true;
        }
        return false;
    }

}
